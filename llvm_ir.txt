@oneDimensionalArray = dso_local global [5 x i32] zeroinitializer
@twoDimensionalArray = dso_local global [25 x i32] zeroinitializer
declare i32 @getint()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)
define dso_local i32 @copyArray1D(i32* %0)
{
;<label>:%1
    %2 = alloca i32*
    store i32* %0, i32* * %2
    %3 = load i32*, i32* * %2
    %4 = getelementptr i32, i32* %3, i32 0
    %5 = load i32, i32 * %4
    call void @putint(i32 %5)
    call void @putch(i32 10)
    %6 = load i32*, i32* * %2
    %7 = getelementptr i32, i32* %6, i32 1
    %8 = load i32, i32 * %7
    call void @putint(i32 %8)
    call void @putch(i32 10)
    %9 = load i32*, i32* * %2
    %10 = getelementptr i32, i32* %9, i32 2
    %11 = load i32, i32 * %10
    call void @putint(i32 %11)
    call void @putch(i32 10)
    %12 = load i32*, i32* * %2
    %13 = getelementptr i32, i32* %12, i32 3
    %14 = load i32, i32 * %13
    call void @putint(i32 %14)
    call void @putch(i32 10)
    %15 = load i32*, i32* * %2
    %16 = getelementptr i32, i32* %15, i32 4
    %17 = load i32, i32 * %16
    call void @putint(i32 %17)
    call void @putch(i32 10)
    ret i32 1
}
define dso_local i32 @main()
{
;<label>:%0
    %1 = alloca [5 x i32]
    %2 = getelementptr [5 x i32], [5 x i32]* %1, i32 0, i32 0
    store i32 0, i32 * %2
    %3 = getelementptr [5 x i32], [5 x i32]* %1, i32 0, i32 1
    store i32 1, i32 * %3
    %4 = getelementptr [5 x i32], [5 x i32]* %1, i32 0, i32 2
    store i32 2, i32 * %4
    %5 = getelementptr [5 x i32], [5 x i32]* %1, i32 0, i32 3
    store i32 3, i32 * %5
    %6 = getelementptr [5 x i32], [5 x i32]* %1, i32 0, i32 4
    store i32 4, i32 * %6
    %7 = getelementptr [5 x i32], [5 x i32]* %1, i32 0, i32 0
    %8 = call i32 @copyArray1D(i32* %7)
    ret i32 0
}
